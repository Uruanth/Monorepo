subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'io.spring.dependency-management'
    sourceCompatibility = JavaVersion.VERSION_11
    repositories {
        mavenCentral()
    }
    test {
        useJUnitPlatform()
    }

    dependencies {

        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
        implementation 'org.slf4j:slf4j-api:1.7.36'

        //Testing
        testImplementation "org.junit.jupiter:junit-jupiter-api:${junitPlatformVersion}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitPlatformVersion}"
        // https://mvnrepository.com/artifact/junit/junit
        testImplementation 'junit:junit:4.13.2'
        // https://mvnrepository.com/artifact/org.mockito/mockito-core
        testImplementation 'org.mockito:mockito-core:5.1.1'
        // https://mvnrepository.com/artifact/org.assertj/assertj-core
        testImplementation 'org.assertj:assertj-core:3.24.2'

        // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test
        testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
    }
    test.finalizedBy(project.tasks.jacocoTestReport)

    jacocoTestReport {
        dependsOn test
        reports {
            xml.setRequired true
            xml.setOutputLocation file("${buildDir}/reports/jacoco.xml")
            csv.setRequired false
            html.setOutputLocation file("${buildDir}/reports/jacocoHtml")
        }
    }

}

jacoco {
    toolVersion = "${jacocoVersion}"
    reportsDirectory = file("$buildDir/reports")
}

task jacocoMergedReport(type: JacocoReport) {
    dependsOn = subprojects.jacocoTestReport
    additionalSourceDirs.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom files(subprojects.sourceSets.main.output)
    executionData.setFrom project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')
    reports {
        xml.setRequired true
        csv.setRequired false
        html.setRequired true
    }
}